generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Deck {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  description String
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
  allowForks  Boolean  @default(true)
  isPrivate   Boolean  @default(false)
  threadUrl   String?
  levelSystem String
  user        User     @relation(fields: [userId], references: [id])
  items       Item[]

  @@index([name, userId])
  @@index([userId])
}

model Item {
  id          Int          @id @default(autoincrement())
  type        String
  en          String
  characters  String
  data        Json
  deckId      Int
  level       Int          @default(0)
  deleted     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  assignments Assignment[]
  deck        Deck         @relation(fields: [deckId], references: [id])

  @@index([deckId, en, characters])
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique()
  password    String
  email       String       @unique()
  dateCreated DateTime     @default(now())
  assignment  Assignment[]
  deck        Deck[]

  @@index([username, password])
}

model WkItem {
  id         Int    @id @default(autoincrement())
  type       String
  characters String
  en         String
  data       Json

  @@index([en, characters])
}

model Assignment {
  id          Int      @id @default(autoincrement())
  userId      Int
  itemId      Int
  stage       Int      @default(1)
  wasCorrect  Boolean
  completedAt DateTime @default(now())
  item        Item     @relation(fields: [itemId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId, itemId])
}
